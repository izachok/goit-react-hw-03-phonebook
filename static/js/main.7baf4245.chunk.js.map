{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/FormButton/FormButton.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactList/ContactList.module.css","components/FormButton/FormButton.module.css","components/Filter/Filter.module.css"],"names":["module","exports","FormButton","type","onClick","disabled","children","className","s","button","ContactForm","state","name","phoneNumber","initialValues","validationSchema","Yup","matches","required","onSubmit","values","resetForm","props","form","label","fieldInput","component","validatorError","Component","ContactList","contacts","onDeleteContact","list","map","id","item","itemName","itemPhone","size","Filter","onChange","LOCAL_STORAGE_CONTACTS","App","filter","addContact","isInContacts","alert","newContact","uuid","setState","toLowerCase","contact","includes","length","deleteContact","contactId","prevState","changeFilter","e","target","value","getFilteredContacts","normalizedFilter","JSON","parse","localStorage","getItem","this","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7baf4245.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"fieldInput\":\"ContactForm_fieldInput__3zV51\",\"validatorError\":\"ContactForm_validatorError__3ngg1\"};","import React from 'react';\nimport s from './FormButton.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function FormButton({\n  type = 'button',\n  onClick,\n  disabled = false,\n  children,\n}) {\n  return (\n    <button\n      type={type}\n      className={s.button}\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nFormButton.propTypes = {\n  type: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    .isRequired,\n};\n","import React, { Component } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactForm.module.css';\nimport FormButton from '../FormButton/FormButton';\n\nexport class ContactForm extends Component {\n  state = {\n    name: '',\n    phoneNumber: '',\n  };\n\n  render() {\n    return (\n      <div>\n        <Formik\n          initialValues={{ name: '', phoneNumber: '' }}\n          validationSchema={Yup.object({\n            name: Yup.string()\n              .matches(\n                /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                \"Name can contain only letters, ', - and space. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\",\n              )\n              .required(),\n            phoneNumber: Yup.string()\n              .matches(\n                /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and startts with +',\n              )\n              .required(),\n          })}\n          onSubmit={(values, { resetForm }) => {\n            this.props.onSubmit(values);\n            resetForm();\n          }}\n        >\n          <Form className={s.form}>\n            <label className={s.label}>\n              Name:\n              <Field className={s.fieldInput} name=\"name\" type=\"text\" />\n              <ErrorMessage\n                name=\"name\"\n                component=\"span\"\n                className={s.validatorError}\n              />\n            </label>\n            <label className={s.label}>\n              Phone number:\n              <Field className={s.fieldInput} name=\"phoneNumber\" type=\"tel\" />\n              <ErrorMessage\n                name=\"phoneNumber\"\n                component=\"span\"\n                className={s.validatorError}\n              />\n            </label>\n            <FormButton type=\"submit\">Add contact</FormButton>\n          </Form>\n        </Formik>\n      </div>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { MdDelete } from 'react-icons/md';\nimport FormButton from '../FormButton';\nimport s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, phoneNumber }) => (\n        <li key={id} className={s.item}>\n          <span className={s.itemName}>{name}</span>\n          <span className={s.itemPhone}>{phoneNumber}</span>\n          <FormButton onClick={() => onDeleteContact(id)}>\n            <MdDelete size=\"18\" />\n          </FormButton>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phoneNumber: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n","import React from 'react';\nimport s from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Filter({ onChange }) {\n  return (\n    <div>\n      <label>\n        Find contacts by name:\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={onChange}\n          className={s.fieldInput}\n        />\n      </label>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport { v1 as uuid } from 'uuid';\n\nconst LOCAL_STORAGE_CONTACTS = 'contacts';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_CONTACTS));\n    if (contacts) {\n      this.setState({ contacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\n        LOCAL_STORAGE_CONTACTS,\n        JSON.stringify(this.state.contacts),\n      );\n    }\n  }\n\n  addContact = ({ name, phoneNumber }) => {\n    if (this.isInContacts(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const newContact = { id: uuid(), name, phoneNumber };\n    this.setState(({ contacts }) => ({ contacts: [newContact, ...contacts] }));\n  };\n\n  isInContacts = name => {\n    name = name.toLowerCase();\n    return (\n      this.state.contacts.filter(contact =>\n        contact.name.toLowerCase().includes(name),\n      ).length > 0\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getFilteredContacts = () => {\n    const normalizedFilter = this.state.filter.toLowerCase();\n    return this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter onChange={this.changeFilter} />\n        <ContactList\n          contacts={this.getFilteredContacts()}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"itemName\":\"ContactList_itemName__3linx\",\"itemPhone\":\"ContactList_itemPhone__2aABR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FormButton_button__2-gNS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput__1at_C\"};"],"sourceRoot":""}